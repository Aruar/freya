//===== Freya Script ========================================= 
//= Global Functions
//===== By: ==================================================
//= Lupus, kobra_k88
//===== Current Version: =====================================
//= 2.08
//===== Compatible With: =====================================
//= Freya
//===== Description: =========================================
//= <Description>
//===== Additional Comments: =================================
//= Added F_ClearJobVar - on getting a new job it clears all Job Quest variables
//= Removed individual job check functions as they were redundant [kobra_k88]
//= 1.3 Added Job Change Function for Baby/Normal Classes
//= 1.3b a fix, due to const.txt change [Lupus]
//= 1.4 Added Is_Taekwon_Class: Taekwondo, Star Knight(Gladiator),Soul Linker [Lupus]
//= 1.5 Added clear of Bard Quest variables. 1.5a updated [Lupus]
//= 1.6 Added F_RandMes, F_SexMes, F_Hi, F_Bye functions [Lupus]
//= Moved here useful function 'getJobName'
//= 1.7 Added "F_ItemName" function, added a great sample for "F_ItemName"
//= 1.8 Added Job Vars clear for Extended classes: TK,SL,SG [Lupus]
//= 1.9 Added "F_ClearGarbage" func that clears outdated, wasted variables [Lupus]
//= 1.91 Added "F_SaveQuestSkills","F_Load?Skills" functions [Lupus]
//= 2.0 Fixed F_Save/LoadQuestSkills functions. Had to split in into 2 vars [Lupus]
//= 2.01 Added $talk to F_ClearGarbage [Evera]
//= 2.02 Added $dtsglobalelig and $dts|(1<<6) to F_ClearGarbage [Evera]
//= 2.03 Added Gunslinger vars to F_ClearJobVar [Lupus]
//= 2.04 Added dtseligible 2 (becomes MISC_QUEST|128) to F_ClearGarbage [Evera]
//= 2.05 Book of Devil -> MISC_QUEST|256, clear other Niflheim garbage vars [Lupus]
//=	+more garbage clean
//= 2.06 Pass to Bio-Lab -> MISC_QUEST|512 [Lupus]
//= 2.07 Added TK_Q variable clear [Lupus]
//- 2.08 Added NINJ_Q variable clear [Lupus]
//============================================================


//////////////////////////////////////////////////////////////////////////////////
// Function that clears job quest variables
//////////////////////////////////////////////////////////////////////////////////

function	script	F_ClearJobVar	{
	// Misc ---------------------------------
	set JBLVL,0;
	set FIRSTAID,0;
	set PLAYDEAD,0;
	set got_bandage,0;
	set got_novnametag,0;
	// First Class Jobs ---------------------
	set job_acolyte_q,0; set job_acolyte_q2,0;
	set job_archer_q,0;
	set job_magician_q,0;
	set job_merchant_q,0; set job_merchant_q2,0; set job_merchant_q3,0;
	set job_sword_q,0; set SWTEST, 0;
	set job_thief_q,0;
	// Super Novice
	set SUPNOV_Q,0;
	// 2-1 Jobs ------------------------------
	set ASSIN_Q,0; set ASSIN_Q2,0;
	set BSMITH_Q,0; set BSMITH_Q2,0;
	set HNTR_Q,0; set HNTR_Q2,0;
	set KNIGHT_Q,0; set KNIGHT_Q2,0;
	set PRIEST_Q,0; set PRIEST_Q2,0; set PRIEST_Q3,0;
	set WIZ_Q,0; set WIZ_Q2,0;
	// 2-2 Jobs ------------------------------
	set ROGUE_Q,0; set ROGUE_Q2,0;
	set ALCH_Q,0; set ALCH_Q2,0;
	set CRUS_Q,0;
	set MONK_Q,0; set JOB_MONK_C,0;
	set SAGE_Q,0; set SAGE_Q2,0;
	set DANC_Q,0;
	set BARD_Q,0;
	// Extended Classes
	set TAEK_Q,0; set TK_Q,0;
	set STGL_Q,0;
	set SOUL_Q,0;
	set GUNS_Q,0;
	set NINJ_Q,0;
	return;
}

function	script	F_ClearGarbage	{
	// Clear outdated global VARS
	//DTS Vote System
	if($dtsglobalelig) set $dtsglobalelig,0;
	if($dts&(1<<6)) set $dts,$dts&~(1<<6);
	//Cube Room
	if(hzdun) {
		set MISC_QUEST,MISC_QUEST|512;
		set num1,0;	set num2,0;	set num3,0;	set num4,0;	set num5,0;
		set num6,0;	set num7,0;	set num8,0;	set num9,0;
		set hzdun,0; set cubekey,0; set piciburn,0;
	}
	//Airship
	if($lengths){
		cleararray $textstringsa$[0],"",getarraysize($textstringsa$);
		cleararray $textstringsb$[0],"",getarraysize($textstringsb$);
		cleararray $textstringsc$[0],"",getarraysize($textstringsc$);
		cleararray $compstring$[0],"",getarraysize($compstring$);
		cleararray $lengths[0],0,getarraysize($lengths);
	}
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// Used in REBIRTH scripts
// Class = Internal Class ID
// BaseJob = Base Job (0..23)
// Upper : 0 - Default, 1 - Advanced, 2 - Baby
//////////////////////////////////////////////////////////////////////////////////

function	script	Job_Change	{
	if (Upper<2) 
		jobchange getarg(0),0; // Common jobchange
	else 
		jobchange getarg(0),2; //Change Job For Baby Class
	return;
}


//////////////////////////////////////////////////////////////////////////////////
// FOT BACKWISE COMPATIBILITY: Functions used to check a players job class
// HOW TO USE:
// i.e. We need all holy classes but monks
// if ( callfunc("Is_Holy_Class") && callfunc("Is_Monk")==0 ) goto L_Start;
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Aco,Monk,Priest,Aco High,High Priest,
// Champion, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Holy_Class	{
	return ( BaseJob==Job_Acolyte || BaseJob==Job_Priest || BaseJob==Job_Monk );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Archer,Hunter,Bard,Dancer,Archer High,Sniper,
// Clown,Gypsy, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Bow_Class	{
	return ( BaseJob==Job_Archer || BaseJob==Job_Hunter || BaseJob==Job_Bard || BaseJob==Job_Dancer );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Mage,Wizard,Sage,Mage High,High Wizard,
// Professor, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Magic_Class	{
	return ( BaseJob==Job_Mage || BaseJob==Job_Wizard || BaseJob==Job_Sage );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Merc,Blacksmith,Alchemist,Merc High,
// Whitesmith,Creator, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Merc_Class	{
	return ( BaseJob==Job_Merchant || BaseJob==Job_Blacksmith || BaseJob==Job_Alchem );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Thief,Assassin,Rogue,Thief High, Assassin Cross
// Stalker, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Thief_Class	{
	return ( BaseJob==Job_Thief || BaseJob==Job_Assassin || BaseJob==Job_Rogue );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Swordy,Knight,Crusader,Swordy High,
// Lord Knight,Paladin, 0 otherwise
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Sword_Class	{
	return ( BaseJob==Job_Swordman || BaseJob==Job_Knight || BaseJob==Job_Knight2 || BaseJob==Job_Crusader || BaseJob==Job_Crusader2 );
}


//////////////////////////////////////////////////////////////////////////////////
// returns 1 if the player is either Taekwon, Star Gladiator,Soul Linker, 0 otherwise
// these classes can't be adopted nor reborn ()
//////////////////////////////////////////////////////////////////////////////////

function	script	Is_Taekwon_Class	{
	return ( Class==JOB_TAEKWON || Class==Job_Star_Gladiator || Class==Job_Star_Gladiator2 || Class==Job_Soul_Linker );
}


//////////////////////////////////////////////////////////////////////////////////
// Functions used to spiff up dialoges [Lupus]
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_RandMes"
//////////////////////////////////////////////////////////////////////////////////
//returns random string
// Example: check F_Bye or F_Hi functions
// READ AND THINK: You can use it to pick a random number form list:
// set @itemIDfromList, callfunc("F_RandMes",8,1129,1222,1163,1357,1360,1522,1811,1410);

function	script	F_RandMes	{
	return getarg(rand(1,getarg(0)));
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Sex"
//////////////////////////////////////////////////////////////////////////////////
//returns 1st string if female, 2nd string otherwise
// Example: mes callfunc("F_Sex","What a beautiful lady!","What a handsom man!");

function	script	F_SexMes	{
	return getarg(Sex);
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Hi"
//////////////////////////////////////////////////////////////////////////////////
//returns random HELLO message

function	script	F_Hi	{
	return callfunc("F_RandMes",5,"Hi!","Hello!","Good day!","How are you?","Hello there.");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Bye"
//////////////////////////////////////////////////////////////////////////////////
//returns random BYE message

function	script	F_Bye	{
	return callfunc("F_RandMes",6,"Bye. See you again.","Later.","Goodbye.","Good luck!","Have a nice day!","Byebye!!!");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_ItemName"
//////////////////////////////////////////////////////////////////////////////////
// Returns expanded item name string
//Argumentss
// 0 - Item ID
// 1 - Element N (0=none,1=Ice,2=Earth,3=Fire,4=Wind)
// 2 - VVS meter 0..3
// 3 - Refine
// Example: mes "Show me your "+callfunc("F_ItemName",1201,1,2,5)+"...";
//  is equal to: mes "Show me your ^000090 +5 VVS Fire Knife ^000000..."

function	script	F_ItemName	{
	set @t$,"^000090";
	if(getarg(3)) set @t$,@t$+"+"+getarg(3)+" ";
	if(getarg(2)==1) set @t$,@t$+"VS ";
	if(getarg(2)==2) set @t$,@t$+"VVS ";
	if(getarg(2)==3) set @t$,@t$+"VVVS ";
	if(getarg(2)>3) set @t$,@t$+getarg(2)+"xVS ";
	if(getarg(1)==1) set @t$,@t$+"Ice ";
	if(getarg(1)==2) set @t$,@t$+"Earth ";
	if(getarg(1)==3) set @t$,@t$+"Fire ";
	if(getarg(1)==4) set @t$,@t$+"Wind ";
	if(getarg(1)>4) set @t$,@t$+"Strange ";
	return @t$+getitemname(getarg(0))+"^000000";
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "getJobName"							//
// [Usage] : callfunc("getJobName",Class);                                      //
//////////////////////////////////////////////////////////////////////////////////

function	script	getJobName	{
	switch(getarg(0)){
		case Job_Novice:
			return "Novice";
		case Job_Swordman:
			return "Swordman";
		case Job_Mage:
			return "Magician";
		case Job_Archer:
			return "Archer";
		case Job_Acolyte:
			return "Acolyte";
		case Job_Merchant:
			return "Merchant";
		case Job_Thief:
			return "Thief";
		case Job_Knight:
		case Job_Knight2:
			return "Knight";
		case Job_Priest:
			return "Priest";
		case Job_Wizard:
			return "Wizard";
		case Job_Blacksmith:
			return "Blacksmith";
		case Job_Hunter:
			return "Hunter";
		case Job_Assassin:
			return "Assassin";
		case Job_Crusader:
		case Job_Crusader2:
			return "Crusader";
		case Job_Monk:
			return "Monk";
		case Job_Sage:
			return "Sage";
		case Job_Rogue:
			return "Rogue";
		case Job_Alchem:
			return "Alchemist";
		case Job_Bard:
			return "Bard";
		case Job_Dancer:
			return "Dancer";
		case Job_SuperNovice:
			return "Super Novice";
		case Job_Gunslinger:
			return "Gunsligner";
		case Job_Ninja:
			return "Ninja";
		case Job_Xmas:
			return "Xmas";
		case Job_Novice_High:
			return "Novice High";
		case Job_Swordman_High:
			return "Swordman High";
		case Job_Mage_High:
			return "Magician High";
		case Job_Archer_High:
			return "Archer High";
		case Job_Acolyte_High:
			return "Acolyte High";
		case Job_Merchant_High:
			return "Merchant High";
		case Job_Thief_High:
			return "Thief High";
		case Job_Lord_Knight:
		case Job_Lord_Knight2:
			return "Lord Knight";
		case Job_High_Priest:
			return "High Priest";
		case Job_High_Wizard:
			return "High Wizard";
		case Job_Whitesmith:
			return "Whitesmith";
		case Job_Sniper:
			return "Sniper";
		case Job_Assassin_Cross:
			return "Assassin Cross";
		case Job_Paladin:
		case Job_Paladin2:
			return "Paladin";
		case Job_Champion:
			return "Champion";
		case Job_Professor:
			return "Professor";
		case Job_Stalker:
			return "Stalker";
		case Job_Creator:
			return "Creator";
		case Job_Clown:
			return "Clown";
		case Job_Gypsy:
			return "Gypsy";
		case Job_Baby:
			return "Baby";
		case Job_Baby_Swordman:
			return "Baby Swordman";
		case Job_Baby_Mage:
			return "Baby Magician";
		case Job_Baby_Archer:
			return "Baby Archer";
		case Job_Baby_Acolyte:
			return "Baby Acolyte";
		case Job_Baby_Merchant:
			return "Baby Merchant";
		case Job_Baby_Thief:
			return "Baby Thief";
		case Job_Baby_Knight:
		case Job_Baby_Knight2:
			return "Baby Knight";
		case Job_Baby_Priest:
			return "Baby Priest";
		case Job_Baby_Wizard:
			return "Baby Wizard";
		case Job_Baby_Blacksmith:
			return "Baby Blacksmith";
		case Job_Baby_Hunter:
			return "Baby Hunter";
		case Job_Baby_Assassin:
			return "Baby Assassin";
		case Job_Baby_Crusader:
		case Job_Baby_Crusader2:
			return "Baby Crusader";
		case Job_Baby_Monk:
			return "Baby Monk";
		case Job_Baby_Sage:
			return "Baby Sage";
		case Job_Baby_Rogue:
			return "Baby Rogue";
		case Job_Baby_Alchem:
			return "Baby Alchemist";
		case Job_Baby_Bard:
			return "Baby Bard";
		case Job_Baby_Dancer:
			return "Baby Dancer";
		case Job_Super_Baby:
			return "Super Baby";
		case JOB_TAEKWON:
			if(Sex == 0)
				return "Taekwon Girl";
			else
				return "Taekwon Boy";
		case Job_Star_Gladiator:
		case Job_Star_Gladiator2:
			return "Star Gladiator";
		case Job_Soul_Linker:
			return "Soul Linker";
		case Job_Ninja:
			return "Ninja";
		case Job_Gunslinger:
			return "Gunslinger";
		case Job_Xmas:
			return "Christmas";
		case Option_Wedding:
			if(Sex == 0)
				return "Bride";
			else
				return "Bridegroom";
		default:
			return "omghaxor";
	}
}

//=============================================================
// Function used to save quest skills before rebirth [Tsuyuki]
//-------------------------------------------------------------

function	script	F_SaveQuestSkills	{

	// Save First-Class Quest Skills
	if (getskilllv(142) > 0) set ADVQ1,1;
	if (getskilllv(143) > 0) set ADVQ2,1;
	if (getskilllv(144) > 0) set ADVQ3,1;
	if (getskilllv(145) > 0) set ADVQ4,1;
	if (getskilllv(146) > 0) set ADVQ5,1;
	if (getskilllv(147) > 0) set ADVQ6,1;
	if (getskilllv(148) > 0) set ADVQ7,1;
	if (getskilllv(149) > 0) set ADVQ8,1;
	if (getskilllv(150) > 0) set ADVQ9,1;
	if (getskilllv(151) > 0) set ADVQ10,1;
	if (getskilllv(152) > 0) set ADVQ11,1;
	if (getskilllv(153) > 0) set ADVQ12,1;
	if (getskilllv(154) > 0) set ADVQ13,1;
	if (getskilllv(155) > 0) set ADVQ14,1;
	if (getskilllv(156) > 0) set ADVQ15,1;
	if (getskilllv(157) > 0) set ADVQ16,1;

	// Save Second-Class Quest Skills
	if (getskilllv(1001) > 0) set ADVQ17,1;
	if (getskilllv(1002) > 0) set ADVQ18,1;
	if (getskilllv(1003) > 0) set ADVQ19,1;
	if (getskilllv(1004) > 0) set ADVQ20,1;
	if (getskilllv(1005) > 0) set ADVQ21,1;
	if (getskilllv(1006) > 0) set ADVQ22,1;
	if (getskilllv(1007) > 0) set ADVQ23,1;
	if (getskilllv(1008) > 0) set ADVQ24,1;
	if (getskilllv(1009) > 0) set ADVQ25,1;
	if (getskilllv(1010) > 0) set ADVQ26,1;
	if (getskilllv(1011) > 0) set ADVQ27,1;
	if (getskilllv(1012) > 0) set ADVQ28,1;
	if (getskilllv(1013) > 0) set ADVQ29,1;
	if (getskilllv(1014) > 0) set ADVQ30,1;
	if (getskilllv(1015) > 0) set ADVQ31,1;
	if (getskilllv(1016) > 0) set ADVQ32,1;
	if (getskilllv(1017) > 0) set ADVQ33,1;
	if (getskilllv(1018) > 0) set ADVQ34,1;
	if (getskilllv(1019) > 0) set ADVQ35,1;

	return;
}

//=============================================================
// Function used to return quest skills after rebirth [Tsuyuki]
//-------------------------------------------------------------

function	script	F_ReturnQuestSkills	{

	if (ADVQ1 == 1) skill 142,1,0;
	if (Class == JOB_NOVICE_HIGH && ADVQ2 == 1) skill 143,1,0;

	if (Class >= JOB_SWORDMAN_HIGH && Class <= JOB_PALADIN2) goto L_Return1stSkills;

	return;

	L_Return1stSkills:

		if (ADVQ3 == 1) skill 144,1,0;
		if (ADVQ4 == 1) skill 145,1,0;
		if (ADVQ5 == 1) skill 146,1,0;
		if (ADVQ6 == 1) skill 147,1,0;
		if (ADVQ7 == 1) skill 148,1,0;
		if (ADVQ8 == 1) skill 149,1,0;
		if (ADVQ9 == 1) skill 150,1,0;
		if (ADVQ10 == 1) skill 151,1,0;
		if (ADVQ11 == 1) skill 152,1,0;
		if (ADVQ12 == 1) skill 153,1,0;
		if (ADVQ13 == 1) skill 154,1,0;
		if (ADVQ14 == 1) skill 155,1,0;
		if (ADVQ15 == 1) skill 156,1,0;
		if (ADVQ16 == 1) skill 157,1,0;

		goto L_ReturnCont01;

	L_ReturnCont01:

		if (Class >= JOB_LORD_KNIGHT && Class <= JOB_PALADIN2) goto L_Return2ndSkills;

		return;

		L_Return2ndSkills:

			if (ADVQ17 == 1) skill 1001,1,0;
			if (ADVQ18 == 1) skill 1002,1,0;
			if (ADVQ19 == 1) skill 1003,1,0;
			if (ADVQ20 == 1) skill 1004,1,0;
			if (ADVQ21 == 1) skill 1005,1,0;
			if (ADVQ22 == 1) skill 1006,1,0;
			if (ADVQ23 == 1) skill 1007,1,0;
			if (ADVQ24 == 1) skill 1008,1,0;
			if (ADVQ25 == 1) skill 1009,1,0;
			if (ADVQ26 == 1) skill 1010,1,0;
			if (ADVQ27 == 1) skill 1011,1,0;
			if (ADVQ28 == 1) skill 1012,1,0;
			if (ADVQ29 == 1) skill 1013,1,0;
			if (ADVQ30 == 1) skill 1014,1,0;
			if (ADVQ31 == 1) skill 1015,1,0;
			if (ADVQ32 == 1) skill 1016,1,0;
			if (ADVQ33 == 1) skill 1017,1,0;
			if (ADVQ34 == 1) skill 1018,1,0;
			if (ADVQ35 == 1) skill 1019,1,0;

			// Remove old variables not that we're done with them
			set ADVQ1,0;
			set ADVQ2,0;
			set ADVQ3,0;
			set ADVQ4,0;
			set ADVQ5,0;
			set ADVQ6,0;
			set ADVQ7,0;
			set ADVQ8,0;
			set ADVQ9,0;
			set ADVQ10,0;
			set ADVQ11,0;
			set ADVQ12,0;
			set ADVQ13,0;
			set ADVQ14,0;
			set ADVQ15,0;
			set ADVQ16,0;
			set ADVQ17,0;
			set ADVQ18,0;
			set ADVQ19,0;
			set ADVQ20,0;
			set ADVQ21,0;
			set ADVQ22,0;
			set ADVQ23,0;
			set ADVQ24,0;
			set ADVQ25,0;
			set ADVQ26,0;
			set ADVQ27,0;
			set ADVQ28,0;
			set ADVQ29,0;
			set ADVQ30,0;
			set ADVQ31,0;
			set ADVQ32,0;
			set ADVQ33,0;
			set ADVQ34,0;
			set ADVQ35,0;

			return;
}
